{
  "hash": "285cf84897d978b26cf594d8566f3524",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Preprocesamiento de datos\nlang: es\n---\n\n\n\nEsta práctica contiene ejercicios que muestran como preprocesar un conjunto de datos en R. El preprocesamiento de datos es una tarea fundamental en el análisis de datos que consiste en la limpieza, transformación y preparación de los datos para su análisis. El preprocesamiento de datos incluye tareas como \n\n- Limpieza de datos.\n- Imputación de valores perdidos.\n- Recodificación de variables.\n- Creación de nuevas variables.\n- Transformación de variables: Normalización, cambio de escala, etc.\n- Selección de variables.\n- Fusión de datos.\n- Reestructuración del conjunto de datos.\n\n## Ejercicios Resueltos\n\nPara la realización de esta práctica se requieren los siguientes paquetes.\n\n```r\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\n# - lubridate: para el procesamiento de fechas.\n```\n\n:::{#exr-preprocesamiento-colesterol}\nEl fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\na.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv).\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Cargamos el conjunto de datos en un data frame.\n    df <- read.csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n    # Mostramos las primeras filas del data frame.\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                            nombre edad sexo peso altura colesterol\n    1 José Luis Martínez Izquierdo   18    H   85   1.79        182\n    2               Rosa Díaz Díaz   32    M   65   1.73        232\n    3        Javier García Sánchez   24    H   NA   1.81        191\n    4          Carmen López Pinzón   35    M   65   1.70        200\n    5         Marisa López Collado   46    M   51   1.58        148\n    6            Antonio Ruiz Cruz   68    H   66   1.74        249\n    ```\n    \n    \n    :::\n    :::\n\n    \n    ## tidyverse\n    Con la función [`read_csv`](https://readr.tidyverse.org/reference/read_delim.html) del paquete del paquete [`readr`](https://readr.tidyverse.org/index.html) de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    # Cargamos el conjunto de datos en un tibble.\n    df <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n    # Mostramos un resumen del data frame.\n    glimpse(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 14\n    Columns: 6\n    $ nombre     <chr> \"José Luis Martínez Izquierdo\", \"Rosa Díaz Díaz\", \"Javier G…\n    $ edad       <dbl> 18, 32, 24, 35, 46, 68, 51, 22, 35, 46, 53, 58, 27, 20\n    $ sexo       <chr> \"H\", \"M\", \"H\", \"M\", \"M\", \"H\", \"H\", \"M\", \"H\", \"H\", \"M\", \"H\",…\n    $ peso       <dbl> 85, 65, NA, 65, 51, 66, 62, 60, 90, 75, 55, 78, 109, 61\n    $ altura     <dbl> 1.79, 1.73, 1.81, 1.70, 1.58, 1.74, 1.72, 1.66, 1.94, 1.85,…\n    $ colesterol <dbl> 182, 232, 191, 200, 148, 249, 276, NA, 241, 280, 262, 198, …\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear una nueva columna con el índice de masa corporal, usando la siguiente fórmula \n\n    $$\n    \\mbox{IMC} = \\frac{\\mbox{Peso (kg)}}{\\mbox{Altura (cm)}^2}\n    $$\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$imc <- round(df$peso/df$altura^2)\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 7\n      nombre                        edad sexo   peso altura colesterol   imc\n      <chr>                        <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl>\n    1 José Luis Martínez Izquierdo    18 H        85   1.79        182    27\n    2 Rosa Díaz Díaz                  32 M        65   1.73        232    22\n    3 Javier García Sánchez           24 H        NA   1.81        191    NA\n    4 Carmen López Pinzón             35 M        65   1.7         200    22\n    5 Marisa López Collado            46 M        51   1.58        148    20\n    6 Antonio Ruiz Cruz               68 H        66   1.74        249    22\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `mutate` del paquete `dplyr` de `tidyverse`.    \n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> mutate(imc = round(peso/altura^2))\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 7\n      nombre                        edad sexo   peso altura colesterol   imc\n      <chr>                        <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl>\n    1 José Luis Martínez Izquierdo    18 H        85   1.79        182    27\n    2 Rosa Díaz Díaz                  32 M        65   1.73        232    22\n    3 Javier García Sánchez           24 H        NA   1.81        191    NA\n    4 Carmen López Pinzón             35 M        65   1.7         200    22\n    5 Marisa López Collado            46 M        51   1.58        148    20\n    6 Antonio Ruiz Cruz               68 H        66   1.74        249    22\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear una nueva columna con la variable `obesidad` recodificando la columna `imc` en las siguientes categorías.\n\n    | Rango IMC | Categoría |\n    |:-|:-|\n    |Menor de 18.5 | Bajo peso |\n    |De 18.5 a 24.5 | Saludable |\n    |De 24.5 a 30 | Sobrepeso |\n    |Mayor de 30 | Obeso |\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función `cut` del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Creamos una nueva columna con la variable obesidad recodificando la columna imc.\n    df$Obesidad <- cut(df$imc, breaks = c(0, 18.5, 24.5, 30, Inf), labels = c(\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\"))\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 8\n      nombre                       edad sexo   peso altura colesterol   imc Obesidad\n      <chr>                       <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n    1 José Luis Martínez Izquier…    18 H        85   1.79        182    27 Sobrepe…\n    2 Rosa Díaz Díaz                 32 M        65   1.73        232    22 Saludab…\n    3 Javier García Sánchez          24 H        NA   1.81        191    NA <NA>    \n    4 Carmen López Pinzón            35 M        65   1.7         200    22 Saludab…\n    5 Marisa López Collado           46 M        51   1.58        148    20 Saludab…\n    6 Antonio Ruiz Cruz              68 H        66   1.74        249    22 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con las funciones del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |>\n        # Creamos una nueva columna con la variable obesidad recodificando la columna imc.\n        mutate(Obesidad = cut(imc, breaks = c(0, 18.5, 24.5, 30, Inf), labels = c(\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\")))\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 8\n      nombre                       edad sexo   peso altura colesterol   imc Obesidad\n      <chr>                       <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n    1 José Luis Martínez Izquier…    18 H        85   1.79        182    27 Sobrepe…\n    2 Rosa Díaz Díaz                 32 M        65   1.73        232    22 Saludab…\n    3 Javier García Sánchez          24 H        NA   1.81        191    NA <NA>    \n    4 Carmen López Pinzón            35 M        65   1.7         200    22 Saludab…\n    5 Marisa López Collado           46 M        51   1.58        148    20 Saludab…\n    6 Antonio Ruiz Cruz              68 H        66   1.74        249    22 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Seleccionar las columnas `nombre`, `sexo` y `edad`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[, c(\"nombre\", \"sexo\", \"edad\")]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 3\n       nombre                          sexo   edad\n       <chr>                           <chr> <dbl>\n     1 José Luis Martínez Izquierdo    H        18\n     2 Rosa Díaz Díaz                  M        32\n     3 Javier García Sánchez           H        24\n     4 Carmen López Pinzón             M        35\n     5 Marisa López Collado            M        46\n     6 Antonio Ruiz Cruz               H        68\n     7 Antonio Fernández Ocaña         H        51\n     8 Pilar Martín González           M        22\n     9 Pedro Gálvez Tenorio            H        35\n    10 Santiago Reillo Manzano         H        46\n    11 Macarena Álvarez Luna           M        53\n    12 José María de la Guía Sanz      H        58\n    13 Miguel Angel Cuadrado Gutiérrez H        27\n    14 Carolina Rubio Moreno           M        20\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `select` del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> select(nombre, sexo, edad)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 3\n       nombre                          sexo   edad\n       <chr>                           <chr> <dbl>\n     1 José Luis Martínez Izquierdo    H        18\n     2 Rosa Díaz Díaz                  M        32\n     3 Javier García Sánchez           H        24\n     4 Carmen López Pinzón             M        35\n     5 Marisa López Collado            M        46\n     6 Antonio Ruiz Cruz               H        68\n     7 Antonio Fernández Ocaña         H        51\n     8 Pilar Martín González           M        22\n     9 Pedro Gálvez Tenorio            H        35\n    10 Santiago Reillo Manzano         H        46\n    11 Macarena Álvarez Luna           M        53\n    12 José María de la Guía Sanz      H        58\n    13 Miguel Angel Cuadrado Gutiérrez H        27\n    14 Carolina Rubio Moreno           M        20\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Anonimizar los datos eliminando la columna `nombre`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[, -1]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 7\n        edad sexo   peso altura colesterol   imc Obesidad \n       <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n     1    18 H        85   1.79        182    27 Sobrepeso\n     2    32 M        65   1.73        232    22 Saludable\n     3    24 H        NA   1.81        191    NA <NA>     \n     4    35 M        65   1.7         200    22 Saludable\n     5    46 M        51   1.58        148    20 Saludable\n     6    68 H        66   1.74        249    22 Saludable\n     7    51 H        62   1.72        276    21 Saludable\n     8    22 M        60   1.66         NA    22 Saludable\n     9    35 H        90   1.94        241    24 Saludable\n    10    46 H        75   1.85        280    22 Saludable\n    11    53 M        55   1.62        262    21 Saludable\n    12    58 H        78   1.87        198    22 Saludable\n    13    27 H       109   1.98        210    28 Sobrepeso\n    14    20 M        61   1.77        194    19 Saludable\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `select` del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> select(-nombre)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 7\n        edad sexo   peso altura colesterol   imc Obesidad \n       <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n     1    18 H        85   1.79        182    27 Sobrepeso\n     2    32 M        65   1.73        232    22 Saludable\n     3    24 H        NA   1.81        191    NA <NA>     \n     4    35 M        65   1.7         200    22 Saludable\n     5    46 M        51   1.58        148    20 Saludable\n     6    68 H        66   1.74        249    22 Saludable\n     7    51 H        62   1.72        276    21 Saludable\n     8    22 M        60   1.66         NA    22 Saludable\n     9    35 H        90   1.94        241    24 Saludable\n    10    46 H        75   1.85        280    22 Saludable\n    11    53 M        55   1.62        262    21 Saludable\n    12    58 H        78   1.87        198    22 Saludable\n    13    27 H       109   1.98        210    28 Sobrepeso\n    14    20 M        61   1.77        194    19 Saludable\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Reordenar las columnas poniendo la columna `sexo` antes que la columna `edad`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[, c(1, 3, 2, 4, 5, 6)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 6\n       nombre                          sexo   edad  peso altura colesterol\n       <chr>                           <chr> <dbl> <dbl>  <dbl>      <dbl>\n     1 José Luis Martínez Izquierdo    H        18    85   1.79        182\n     2 Rosa Díaz Díaz                  M        32    65   1.73        232\n     3 Javier García Sánchez           H        24    NA   1.81        191\n     4 Carmen López Pinzón             M        35    65   1.7         200\n     5 Marisa López Collado            M        46    51   1.58        148\n     6 Antonio Ruiz Cruz               H        68    66   1.74        249\n     7 Antonio Fernández Ocaña         H        51    62   1.72        276\n     8 Pilar Martín González           M        22    60   1.66         NA\n     9 Pedro Gálvez Tenorio            H        35    90   1.94        241\n    10 Santiago Reillo Manzano         H        46    75   1.85        280\n    11 Macarena Álvarez Luna           M        53    55   1.62        262\n    12 José María de la Guía Sanz      H        58    78   1.87        198\n    13 Miguel Angel Cuadrado Gutiérrez H        27   109   1.98        210\n    14 Carolina Rubio Moreno           M        20    61   1.77        194\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `select` del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> select(nombre, sexo, edad, everything())\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                     sexo   edad  peso altura colesterol   imc Obesidad\n       <chr>                      <chr> <dbl> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie… H        18    85   1.79        182    27 Sobrepe…\n     2 Rosa Díaz Díaz             M        32    65   1.73        232    22 Saludab…\n     3 Javier García Sánchez      H        24    NA   1.81        191    NA <NA>    \n     4 Carmen López Pinzón        M        35    65   1.7         200    22 Saludab…\n     5 Marisa López Collado       M        46    51   1.58        148    20 Saludab…\n     6 Antonio Ruiz Cruz          H        68    66   1.74        249    22 Saludab…\n     7 Antonio Fernández Ocaña    H        51    62   1.72        276    21 Saludab…\n     8 Pilar Martín González      M        22    60   1.66         NA    22 Saludab…\n     9 Pedro Gálvez Tenorio       H        35    90   1.94        241    24 Saludab…\n    10 Santiago Reillo Manzano    H        46    75   1.85        280    22 Saludab…\n    11 Macarena Álvarez Luna      M        53    55   1.62        262    21 Saludab…\n    12 José María de la Guía Sanz H        58    78   1.87        198    22 Saludab…\n    13 Miguel Angel Cuadrado Gut… H        27   109   1.98        210    28 Sobrepe…\n    14 Carolina Rubio Moreno      M        20    61   1.77        194    19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Filtrar el data frame para quedarse con las mujeres.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[df$sexo == \"M\", ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 8\n      nombre                 edad sexo   peso altura colesterol   imc Obesidad \n      <chr>                 <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n    1 Rosa Díaz Díaz           32 M        65   1.73        232    22 Saludable\n    2 Carmen López Pinzón      35 M        65   1.7         200    22 Saludable\n    3 Marisa López Collado     46 M        51   1.58        148    20 Saludable\n    4 Pilar Martín González    22 M        60   1.66         NA    22 Saludable\n    5 Macarena Álvarez Luna    53 M        55   1.62        262    21 Saludable\n    6 Carolina Rubio Moreno    20 M        61   1.77        194    19 Saludable\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función filter del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> filter(sexo == \"M\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 8\n      nombre                 edad sexo   peso altura colesterol   imc Obesidad \n      <chr>                 <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n    1 Rosa Díaz Díaz           32 M        65   1.73        232    22 Saludable\n    2 Carmen López Pinzón      35 M        65   1.7         200    22 Saludable\n    3 Marisa López Collado     46 M        51   1.58        148    20 Saludable\n    4 Pilar Martín González    22 M        60   1.66         NA    22 Saludable\n    5 Macarena Álvarez Luna    53 M        55   1.62        262    21 Saludable\n    6 Carolina Rubio Moreno    20 M        61   1.77        194    19 Saludable\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Filtrar el data frame para quedarse con los hombres mayores de 30 años.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[df$sexo == \"H\" & df$edad > 30, ]    \n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 5 × 8\n      nombre                      edad sexo   peso altura colesterol   imc Obesidad \n      <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n    1 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludable\n    2 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludable\n    3 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludable\n    4 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludable\n    5 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludable\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `filter` paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> filter( sexo == \"H\" & edad > 30)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 5 × 8\n      nombre                      edad sexo   peso altura colesterol   imc Obesidad \n      <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n    1 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludable\n    2 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludable\n    3 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludable\n    4 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludable\n    5 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludable\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Filtrar el data frame para quedarse con las filas sin valores perdidos.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función `na.omit` del paquete `base` de R. La función `na.omit` elimina las filas con valores perdidos.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    na.omit(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 12 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n     2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n     3 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n     4 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n     5 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n     6 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n     7 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n     8 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n     9 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n    10 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n    11 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n    12 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `drop_na` del paquete `tidyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> drop_na()\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 12 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n     2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n     3 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n     4 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n     5 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n     6 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n     7 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n     8 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n     9 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n    10 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n    11 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n    12 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Filtrar el data frame para eliminar las filas con datos perdidos en la columna `colesterol`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R. La función `is.na` devuelve `TRUE` cuando se aplica a un valor perdido `NA`. Cuando se aplica a un vector devuelve un vector lógico con `TRUE` en las posiciones con valores perdidos y `FALSE` en las posiciones con valores no perdidos.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[!is.na(df$colesterol), ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 13 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n     2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n     3 Javier García Sánchez         24 H        NA   1.81        191    NA <NA>    \n     4 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n     5 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n     6 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n     7 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n     8 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n     9 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n    10 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n    11 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n    12 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n    13 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función filter del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> filter(!is.na(colesterol))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 13 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n     2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n     3 Javier García Sánchez         24 H        NA   1.81        191    NA <NA>    \n     4 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n     5 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n     6 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n     7 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n     8 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n     9 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n    10 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n    11 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n    12 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n    13 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Imputar los valores perdidos en la columna `colesterol` con la media de los valores no perdidos.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función `mean` del paquete `base` de R. La función `mean` calcula la media de un vector. Para que no se tengan en cuenta los valores perdidos se puede usar el argumento `na.rm = TRUE`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    media_colesterol <- mean(df$colesterol, na.rm = TRUE)\n    df$colesterol[is.na(df$colesterol)] <- media_colesterol\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n     2 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n     3 Javier García Sánchez         24 H        NA   1.81       191     NA <NA>    \n     4 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n     5 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n     6 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n     7 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n     8 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n     9 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n    10 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n    11 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n    12 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n    13 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n    14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `mutate` del paquete `dplyr` de `tidyverse`. La función `ifelse` permite asignar un valor a un vector en función de una condición.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |>\n        mutate(colesterol = ifelse(is.na(colesterol), mean(colesterol, na.rm = TRUE), colesterol))\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n     2 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n     3 Javier García Sánchez         24 H        NA   1.81       191     NA <NA>    \n     4 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n     5 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n     6 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n     7 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n     8 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n     9 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n    10 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n    11 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n    12 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n    13 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n    14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Ordenar el data frame según la columna `nombre`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función `order` del paquete `base` de R. La función `order` devuelve un vector con los índices de las filas ordenadas de menor a mayor.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[order(df$nombre), ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n     2 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n     3 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n     4 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n     5 Javier García Sánchez         24 H        NA   1.81       191     NA <NA>    \n     6 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n     7 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n     8 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n     9 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n    10 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n    11 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n    12 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n    13 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n    14 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función [`arrange`](https://dplyr.tidyverse.org/reference/arrange.html) del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> arrange(nombre)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n     2 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n     3 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n     4 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n     5 Javier García Sánchez         24 H        NA   1.81       191     NA <NA>    \n     6 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n     7 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n     8 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n     9 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n    10 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n    11 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n    12 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n    13 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n    14 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Ordenar el data frame ascendentemente por la columna `sexo` y descendentemente por la columna `edad`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[order(df$sexo, -df$edad), ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n     2 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n     3 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n     4 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n     5 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n     6 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n     7 Javier García Sánchez         24 H        NA   1.81       191     NA <NA>    \n     8 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n     9 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n    10 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n    11 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n    12 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n    13 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n    14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `arrange` del paquete `dplyr` de `tidyverse`. Para que la ordenación sea descendente con respecto a una variable se tiene que usar la función `desc` sobre la variable.\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> arrange(sexo, desc(edad))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 8\n       nombre                      edad sexo   peso altura colesterol   imc Obesidad\n       <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>   \n     1 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n     2 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n     3 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n     4 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n     5 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n     6 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n     7 Javier García Sánchez         24 H        NA   1.81       191     NA <NA>    \n     8 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n     9 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n    10 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n    11 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n    12 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n    13 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n    14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n:::\n\n:::{#exr-preprocesamiento-notas}\nEl fichero [`notas-curso2.csv`](datos/notas-curso2.csv) contiene las notas de las asignaturas de un curso en varios grupos de alumnos.\n\na.  Crear un data frame con los datos del curso a partir del fichero [`notas-curso2.csv`](datos/notas-curso2.csv).\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    # Cargamos el conjunto de datos en un data frame.\n    df <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/notas-curso2.csv\")\n    # Mostramos el data frame.\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 120 × 9\n       sexo   turno  grupo trabaja notaA notaB notaC notaD notaE\n       <chr>  <chr>  <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl>\n     1 Mujer  Tarde  C     N         5.2   6.3   3.4   2.3   2  \n     2 Hombre Mañana A     N         5.7   5.7   4.2   3.5   2.7\n     3 Hombre Mañana B     N         8.3   8.8   8.8   8     5.5\n     4 Hombre Mañana B     N         6.1   6.8   4     3.5   2.2\n     5 Hombre Mañana A     N         6.2   9     5     4.4   3.7\n     6 Hombre Mañana A     S         8.6   8.9   9.5   8.4   3.9\n     7 Mujer  Mañana A     N         6.7   7.9   5.6   4.8   4.2\n     8 Mujer  Tarde  C     S         4.1   5.2   1.7   0.3   1  \n     9 Hombre Tarde  C     N         5     5     3.3   2.7   6  \n    10 Hombre Tarde  C     N         5.3   6.3   4.8   3.6   2.3\n    # ℹ 110 more rows\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Convertir el data frame a formato largo. \n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para convertir un data frame de formato ancho a largo se puede usar la función [`pivot_longer`](https://tidyr.tidyverse.org/reference/pivot_longer.html) del paquete `tidyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Convertimos el data frame a formato largo.\n    df_largo <- df |> pivot_longer(notaA:notaE, names_to = \"Asignatura\", values_to = \"Nota\")\n    # Mostramos el data frame en formato largo.\n    df_largo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 600 × 6\n       sexo   turno  grupo trabaja Asignatura  Nota\n       <chr>  <chr>  <chr> <chr>   <chr>      <dbl>\n     1 Mujer  Tarde  C     N       notaA        5.2\n     2 Mujer  Tarde  C     N       notaB        6.3\n     3 Mujer  Tarde  C     N       notaC        3.4\n     4 Mujer  Tarde  C     N       notaD        2.3\n     5 Mujer  Tarde  C     N       notaE        2  \n     6 Hombre Mañana A     N       notaA        5.7\n     7 Hombre Mañana A     N       notaB        5.7\n     8 Hombre Mañana A     N       notaC        4.2\n     9 Hombre Mañana A     N       notaD        3.5\n    10 Hombre Mañana A     N       notaE        2.7\n    # ℹ 590 more rows\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear una nueva columna con la variable `calificación` que contenga las calificaciones de cada asignatura.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_largo <- df_largo |>\n        # Creamos una nueva columna con la variable calificación recodificando la columna Nota.\n        mutate(Calificación = cut(Nota, breaks = c(0, 4.99, 6.99, 8.99, 10), labels = c(\"SS\", \"AP\", \"NT\", \"SB\")))\n    # Mostramos el data frame con la nueva columna.\n    df_largo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 600 × 7\n       sexo   turno  grupo trabaja Asignatura  Nota Calificación\n       <chr>  <chr>  <chr> <chr>   <chr>      <dbl> <fct>       \n     1 Mujer  Tarde  C     N       notaA        5.2 AP          \n     2 Mujer  Tarde  C     N       notaB        6.3 AP          \n     3 Mujer  Tarde  C     N       notaC        3.4 SS          \n     4 Mujer  Tarde  C     N       notaD        2.3 SS          \n     5 Mujer  Tarde  C     N       notaE        2   SS          \n     6 Hombre Mañana A     N       notaA        5.7 AP          \n     7 Hombre Mañana A     N       notaB        5.7 AP          \n     8 Hombre Mañana A     N       notaC        4.2 SS          \n     9 Hombre Mañana A     N       notaD        3.5 SS          \n    10 Hombre Mañana A     N       notaE        2.7 SS          \n    # ℹ 590 more rows\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Filtrar el conjunto de datos para obtener las asignaturas y las notas de las mujeres del grupo A, ordenadas de mayor a menor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df_largo |>\n        # Filtramos las filas para quedarnos con las mujeres del grupo A.\n        filter(sexo == \"Mujer\", grupo == \"A\") |>\n        # Seleccionamos las columnas Asignatura y Nota.\n        select(Asignatura, Nota) |>\n        # Ordenamos las filas por la columna Nota de mayor a menor.\n        arrange(desc(Nota))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 75 × 2\n       Asignatura  Nota\n       <chr>      <dbl>\n     1 notaB        9.2\n     2 notaE        9.2\n     3 notaB        8.8\n     4 notaB        8.6\n     5 notaB        8.6\n     6 notaA        8.3\n     7 notaB        8.2\n     8 notaB        8.1\n     9 notaA        8  \n    10 notaB        8  \n    # ℹ 65 more rows\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n:::\n\n:::{#exr-preprocesamiento-hipertension}\nSe ha diseñado un ensayo clínico aleatorizado, doble-ciego y controlado con placebo, para estudiar el efecto de dos alternativas terapéuticas en el control de la hipertensión arterial. Se han reclutado 100 pacientes hipertensos y estos han sido distribuidos aleatoriamente en tres grupos de tratamiento. A uno de los grupos (control) se le administró un placebo, a otro grupo se le administró un inhibidor de la enzima conversora de la angiotensina (IECA) y al otro un tratamiento combinado de un diurético y un Antagonista del Calcio. Las variables respuesta final fueron las presiones arteriales sistólica y diastólica.\n\nLos datos con las claves de aleatorización han sido introducidos en una base de datos que reside en la central de aleatorización, mientras que los datos clínicos han sido archivados en dos archivos distintos, uno para cada uno de los dos centros participantes en el estudio.\n\nLas variables almacenadas en estos archivos clínicos son las siguientes:\n\n- CLAVE: Clave de aleatorización\n- NOMBRE: Iniciales del paciente\n- F_NACIM: Fecha de Nacimiento\n- F_INCLUS: Fecha de inclusión\n- SEXO: Sexo (0: Hombre 1: Mujer)\n- ALTURA: Altura en cm.\n- PESO: Peso en Kg.\n- PAD_INI: Presión diastólica basal (inicial)\n- PAD_FIN: Presión diastólica final\n- PAS_INI: Presión sistólica basal (inicial)\n- PAS_FIN:  Presión sistólica final\n\nEl archivo de claves de aleatorización contiene sólo dos variables.\n\n- CLAVE: Clave de aleatorización\n- FARMACO: Fármaco administrado (0: Placebo, 1: IECA,  2:Ca Antagonista + diurético)\n\na.  Crear un data frame con los datos de los pacientes del hospital A del fichero de Excel [datos-hospital-a.xls](https://aprendeconalf.es/aprendizaje-automatico-practicas-r/datos/hipertension/datos-hospital-a.xls).\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(readxl)\n    # Cargamos el conjunto de datos del primer hospital en un data frame.\n    dfA <- read_excel(\"datos/hipertension/datos-hospital-a.xls\")\n    # Mostramos un resumen del data frame.\n    glimpse(dfA)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 10\n    Columns: 12\n    $ CLAVE    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    $ NOMBRE   <chr> \"SGL\", \"JCZ\", \"APZ\", \"NDG\", \"CLO\", \"LFZ\", \"OAR\", \"SGH\", \"ZLZ\"…\n    $ F_NACIM  <dttm> 1941-09-08, 1957-07-10, 1967-08-18, 1956-05-08, 1958-11-02, 1…\n    $ F_INCLUS <dttm> 1998-07-13, 1998-05-09, 2000-04-01, 1998-11-13, 1999-02-24, …\n    $ SEXO     <dbl> 1, 1, 0, 0, 1, 0, 1, 0, 1, 0\n    $ ALTURA   <dbl> 165, 154, 156, 181, 184, 179, 159, 153, 172, 154\n    $ PESO     <dbl> 78, 74, 81, 82, 78, 80, 60, 70, 57, 54\n    $ ESTRES   <dbl> 42, 30, 21, 33, 36, 22, 31, 12, 21, 24\n    $ PAD_INI  <dbl> 78, 95, 93, 86, 89, 74, 94, 94, 74, 89\n    $ PAD_FIN  <dbl> 104, 114, 102, 91, 94, 99, 95, 79, 64, 87\n    $ PAS_INI  <dbl> 176, 162, 141, 162, 165, 141, 168, 133, 149, 147\n    $ PAS_FIN  <dbl> 175, 160, 150, 161, 162, 148, 152, 143, 135, 155\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear un data frame con los datos de los pacientes del hospital B del fichero csv [datos-hospital-b.csv](datos/hipertension/datos-hospital-b.csv).\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Cargamos el conjunto de datos del segundo hospital en un data frame.\n    dfB <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/hipertension/datos-hospital-b.csv\")\n    # Mostramos un resumen del data frame.\n    glimpse(dfB)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 90\n    Columns: 12\n    $ CLAVE    <dbl> 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2…\n    $ NOMBRE   <chr> \"VSH\", \"SZS\", \"JSS\", \"BMH\", \"DGM\", \"POJ\", \"EAI\", \"MLS\", \"JVP\"…\n    $ F_NACIM  <date> 1965-12-15, 1971-03-07, 1964-01-03, 1941-08-16, 1969-01-24, …\n    $ F_INCLUS <date> 1999-12-06, 1999-02-13, 1998-10-31, 1999-09-16, 1999-08-19, …\n    $ SEXO     <dbl> 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1…\n    $ ALTURA   <dbl> 170, 154, 162, 162, 173, 177, 164, 175, 184, 155, 156, 160, 1…\n    $ PESO     <dbl> 59, 61, 49, 77, 95, 63, 85, 67, 116, 51, 85, 86, 73, 86, 76, …\n    $ ESTRES   <dbl> 32.00, 20.25, 30.00, 26.00, 18.00, 19.00, 27.00, 35.00, 44.00…\n    $ PAD_INI  <dbl> 90, 92, 86, 93, 81, 72, 85, 84, 94, 96, 77, 77, 83, 90, 76, 8…\n    $ PAD_FIN  <dbl> 82, 102, 94, 77, 77, 96, 107, 111, 105, 55, 102, 111, 77, 62,…\n    $ PAS_INI  <dbl> 161, 147, 161, 152, 147, 145, 157, 165, 192, 126, 162, 160, 1…\n    $ PAS_FIN  <dbl> 148, 153, 162, 151, 145, 150, 165, 175, 179, 114, 160, 168, 1…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Fusionar los datos de los dos hospitales en un nuevo data frame.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función `rbind` del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- rbind(dfA, dfB)\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 12\n      CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n      <dbl> <chr>  <dttm>              <dttm>              <dbl>  <dbl> <dbl>  <dbl>\n    1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n    2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n    3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n    4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n    5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n    6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n    # ℹ 4 more variables: PAD_INI <dbl>, PAD_FIN <dbl>, PAS_INI <dbl>,\n    #   PAS_FIN <dbl>\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función [`bind_rows`](https://dplyr.tidyverse.org/reference/bind.html) del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- dfA |> bind_rows(dfB)\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 12\n      CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n      <dbl> <chr>  <dttm>              <dttm>              <dbl>  <dbl> <dbl>  <dbl>\n    1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n    2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n    3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n    4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n    5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n    6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n    # ℹ 4 more variables: PAD_INI <dbl>, PAD_FIN <dbl>, PAS_INI <dbl>,\n    #   PAS_FIN <dbl>\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear un data frame con los datos de las claves de aleatorización del fichero csv [claves-aleatorizacion.csv](datos/hipertension/claves-aleatorizacion.csv).\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Cargamos el conjunto de datos de las claves de aleatorización en un data frame.\n    claves <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/hipertension/claves-aleatorizacion.csv\")\n    # Mostramos un resumen del data frame.\n    glimpse(claves)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 100\n    Columns: 2\n    $ CLAVE   <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,…\n    $ FARMACO <chr> \"Ca Antagonista + Diurético\", \"Ca Antagonista + Diurético\", \"P…\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Fusionar el data frame con los datos clínicos y el data frame con claves de aleatorización en un nuevo data frame.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    Para fusionar las columnas de dos data frames usando una misma columna como clave en ambos data frames se puede la función [`left_join`](https://dtplyr.tidyverse.org/reference/left_join.dtplyr_step.html) del paquete `dplyr` de `tidyverse`.\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> left_join(claves, by = \"CLAVE\")\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 13\n      CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n      <dbl> <chr>  <dttm>              <dttm>              <dbl>  <dbl> <dbl>  <dbl>\n    1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n    2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n    3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n    4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n    5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n    6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n    # ℹ 5 more variables: PAD_INI <dbl>, PAD_FIN <dbl>, PAS_INI <dbl>,\n    #   PAS_FIN <dbl>, FARMACO <chr>\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Convertir la columna del sexo en un factor con dos niveles: `Hombre` y `Mujer`.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$SEXO <- factor(df$SEXO, levels = c(0, 1), labels = c(\"Hombre\", \"Mujer\"))\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 13\n      CLAVE NOMBRE F_NACIM             F_INCLUS            SEXO  ALTURA  PESO ESTRES\n      <dbl> <chr>  <dttm>              <dttm>              <fct>  <dbl> <dbl>  <dbl>\n    1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00 Mujer    165    78     42\n    2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00 Mujer    154    74     30\n    3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00 Homb…    156    81     21\n    4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00 Homb…    181    82     33\n    5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00 Mujer    184    78     36\n    6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00 Homb…    179    80     22\n    # ℹ 5 more variables: PAD_INI <dbl>, PAD_FIN <dbl>, PAS_INI <dbl>,\n    #   PAS_FIN <dbl>, FARMACO <chr>\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `mutate` del paquete `dplyr` de `tidyverse`.\n\n    ```r\n    df <- df |> mutate(SEXO = factor(SEXO, levels = c(0, 1), labels = c(\"Hombre\", \"Mujer\")))\n    head(df)\n    ```\n\n\n    ::: {.cell}\n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 13\n      CLAVE NOMBRE F_NACIM             F_INCLUS            SEXO  ALTURA  PESO ESTRES\n      <dbl> <chr>  <dttm>              <dttm>              <fct>  <dbl> <dbl>  <dbl>\n    1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00 Mujer    165    78     42\n    2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00 Mujer    154    74     30\n    3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00 Homb…    156    81     21\n    4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00 Homb…    181    82     33\n    5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00 Mujer    184    78     36\n    6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00 Homb…    179    80     22\n    # ℹ 5 more variables: PAD_INI <dbl>, PAD_FIN <dbl>, PAS_INI <dbl>,\n    #   PAS_FIN <dbl>, FARMACO <chr>\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear una nueva columna con la edad de los pacientes en el momento de inclusión en el estudio.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$EDAD <- as.numeric(difftime(df$F_INCLUS, df$F_NACIM, units = \"days\")/365)\n    head(df[, c(\"F_NACIM\", \"F_INCLUS\", \"EDAD\")])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 3\n      F_NACIM             F_INCLUS             EDAD\n      <dttm>              <dttm>              <dbl>\n    1 1941-09-08 00:00:00 1998-07-13 00:00:00  56.9\n    2 1957-07-10 00:00:00 1998-05-09 00:00:00  40.9\n    3 1967-08-18 00:00:00 2000-04-01 00:00:00  32.6\n    4 1956-05-08 00:00:00 1998-11-13 00:00:00  42.5\n    5 1958-11-02 00:00:00 1999-02-24 00:00:00  40.3\n    6 1953-06-13 00:00:00 2000-03-16 00:00:00  46.8\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con las funciones `interval` y `time_length` del paquete `lubridate` de `tidyverse`. La función `interval` permite crear un intervalo de tiempo entre dos fechas y la función `time_length` permite calcular la longitud de un intervalo en una determinada unidad de tiempo.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> mutate(AGE = time_length(interval(F_NACIM, F_INCLUS), \"years\"))\n    head(df |>  select(F_NACIM, F_INCLUS, AGE))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 3\n      F_NACIM             F_INCLUS              AGE\n      <dttm>              <dttm>              <dbl>\n    1 1941-09-08 00:00:00 1998-07-13 00:00:00  56.8\n    2 1957-07-10 00:00:00 1998-05-09 00:00:00  40.8\n    3 1967-08-18 00:00:00 2000-04-01 00:00:00  32.6\n    4 1956-05-08 00:00:00 1998-11-13 00:00:00  42.5\n    5 1958-11-02 00:00:00 1999-02-24 00:00:00  40.3\n    6 1953-06-13 00:00:00 2000-03-16 00:00:00  46.8\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear una nueva columna con el índice de masa corporal (IMC) de los pacientes.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$IMC <- df$PESO/(df$ALTURA/100)^2\n    head(df[, c(\"PESO\", \"ALTURA\", \"IMC\")])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 3\n       PESO ALTURA   IMC\n      <dbl>  <dbl> <dbl>\n    1    78    165  28.7\n    2    74    154  31.2\n    3    81    156  33.3\n    4    82    181  25.0\n    5    78    184  23.0\n    6    80    179  25.0\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `mutate` del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> mutate(IMC = PESO/(ALTURA/100)^2)\n    head(df |> select(PESO, ALTURA, IMC))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 3\n       PESO ALTURA   IMC\n      <dbl>  <dbl> <dbl>\n    1    78    165  28.7\n    2    74    154  31.2\n    3    81    156  33.3\n    4    82    181  25.0\n    5    78    184  23.0\n    6    80    179  25.0\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear una nueva columna para la evolución de la presión arterial diastólica y otra con la evolución de la presión arterial sistólica.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$EVOL_PAD <- df$PAD_FIN - df$PAD_INI\n    df$EVOL_PAS <- df$PAS_FIN - df$PAS_INI\n    head(df[, c(\"PAD_INI\", \"PAD_FIN\", \"EVOL_PAD\", \"PAS_INI\", \"PAS_FIN\", \"EVOL_PAS\")])\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 6\n      PAD_INI PAD_FIN EVOL_PAD PAS_INI PAS_FIN EVOL_PAS\n        <dbl>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>\n    1      78     104       26     176     175       -1\n    2      95     114       19     162     160       -2\n    3      93     102        9     141     150        9\n    4      86      91        5     162     161       -1\n    5      89      94        5     165     162       -3\n    6      74      99       25     141     148        7\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función `mutate` del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> mutate(EVOL_PAD = PAD_FIN - PAD_INI, EVOL_PAS = PAS_FIN - PAS_INI)\n    head(df |> select(PAD_INI, PAD_FIN, EVOL_PAD, PAS_INI, PAS_FIN, EVOL_PAS))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 6\n      PAD_INI PAD_FIN EVOL_PAD PAS_INI PAS_FIN EVOL_PAS\n        <dbl>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>\n    1      78     104       26     176     175       -1\n    2      95     114       19     162     160       -2\n    3      93     102        9     141     150        9\n    4      86      91        5     162     161       -1\n    5      89      94        5     165     162       -3\n    6      74      99       25     141     148        7\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Guardar el data frame en un fichero csv.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con la función `write.csv` del paquete `base` de R.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    write.csv(df, \"datos/hipertension/datos-ensayo-clinico.csv\")\n    ```\n    :::\n\n\n    ## tidyverse\n    Con la función `write_csv` del paquete `readr` de `tidyverse`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df  |> write_csv(\"datos/hipertension/datos-ensayo-clinico.csv\")\n    ```\n    :::\n\n    :::\n    :::\n:::\n\n## Ejercicios Propuestos\n\n:::{#exr-preprocesamiento-vinos}\nLos ficheros [`vinos-blancos.xls`](datos/vinos-blancos.xls) y [`vinos-tintos.csv`](datos/vinos-tintos.csv) contienen información sobre las características de vinos blancos y tintos portugueses de la denominación \"Vinho Verde\". Las variables almacenadas en estos archivos son las siguientes:\n\n| Variable             | Descripción                                                           | Tipo (unidades)        |\n|----------------------------------------|-----------------------------------------------------------------------|------------------------|\n| tipo                 | Tipo de vino                                                          | Factor (blanco, tinto) |\n| meses.barrica        | Meses de envejecimiento en barrica                               | Numérica(meses)  |\n| acided.fija          | Cantidad de ácidotartárico                                 | Numérica(g/dm3)  |\n| acided.volatil       | Cantidad de ácido acético                                             | Numérica(g/dm3)  |\n| acido.citrico        | Cantidad de ácidocítrico                                        | Numérica(g/dm3)  |\n| azucar.residual      | Cantidad de azúcar remanente después de la fermentación          | Numérica(g/dm3)  |\n| cloruro.sodico       | Cantidad de clorurosódico                                       | Numérica(g/dm3)  |\n| dioxido.azufre.libre | Cantidad de dióxido de azufre en forma libre                | Numérica(mg/dm3) |\n| dioxido.azufre.total | Cantidad de dióxido de azufre total en forma libre o ligada | Numérica(mg/dm3) |\n| densidad             | Densidad                                                              | Numérica(g/cm3)  |\n| ph                   | pH                                                                    | Numérica(0-14)   |\n| sulfatos             | Cantidad de sulfato de potasio                                   | Numérica(g/dm3)  |\n| alcohol              | Porcentaje de contenido de alcohol                          | Numérica(0-100)  |\n| calidad              | Calificación otorgada por un panel de expertos                   | Numérica(0-10)   |\n\na.  Crear un data frame con los datos de los vinos blancos partir del fichero de Excel [`vinos-blancos.xlsx`](datos/vinos-blancos.xlsx).\n\na.  Crear un data frame con los datos de los vinos tintos partir del fichero csv [`vinos-tintos.csv`](datos/vinos-tintos.csv).\n\na.  Fusionar los datos de los vinos blancos y tintos en un nuevo data frame.\n\na.  Convertir el tipo de vino en un factor.\n\na.  Imputar los valores perdidos del alcohol con la media de los valores no perdidos para cada tipo de vino.\n\na.  Crear un factor `Envejecimiento` recodificando la variable `meses.barrica` en las siguientes categorías.\n\n    | Rango en meses | Categoría |\n    |:-|:-|\n    | Menos de 3 | Joven |\n    | Entre 3 y 12 | Crianza |\n    | Entre 12 y 18 | Reserva |\n    | Más de 18 | Gran reserva |\n\na.  Crear un factor `Dulzor` recodificando la variable `azucar.residual` en las siguientes categorías.\n\n    | Rango azúcar | Categoría |\n    |:-|:-|\n    | Menos de 4 | Seco |\n    | Más de 4 y menos de 12 | Semiseco |\n    | Más de 12 y menos de 45 | Semidulce |\n    | Más de 45 | Dulce |\n\na.  Filtrar el conjunto de datos para quedarse con los vinos Reserva o Gran Reserva con una calidad superior a 7 y ordenar el data frame por calidad de forma descendente.\n\na.  ¿Cuántos vinos blancos con un contenido en alcohol superior al 12% y una calidad superior a 8 hay en el conjunto de datos?\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}