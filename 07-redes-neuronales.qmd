---
title: Redes Neuronales
lang: es
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

Las redes de neuronas artificiales son un modelo computacional inspirado en el funcionamiento del cerebro humano. Una neurona artificial es una unidad de cómputo bastante simple, que recibe una serie de entradas, las procesa y produce una salida. La salida de una neurona puede ser la entrada de otra neurona, formando así una red de neuronas interconectadas, donde cada conexión tiene un peso asociado. Es esta red, que a veces contiene miles y millones de neuronas, la que dota de gran potencia de cálculo a este modelo, siendo capaces de aprender patrones de datos muy complejos, como imágenes, texto o sonido, y por tanto, se utilizan a menudo en tareas de clasificación o regresión.

El aprendizaje en una red neuronal consiste en ajustar los pesos de las conexiones para minimizar el error entre la salida predicha y la salida real.

## Ejercicios Resueltos

Para la realización de esta práctica se requieren los siguientes paquetes:

```r
library(tidyverse) 
# Incluye los siguientes paquetes:
# - readr: para la lectura de ficheros csv. 
# - dplyr: para el preprocesamiento y manipulación de datos.
# - ggplot2: para la visualización de datos.
library(tidymodels)
# Incluye los siguientes paquetes:
# - recipes: para la preparación de los datos. 
# - parsnip: para la creación de modelos.
# - workflows: para la creación de flujos de trabajo.
# - rsample: para la creación de particiones de los datos.
# - yardstick: para la evaluación de modelos.
# - tune: para la optimización de hiperparámetros.
library(skimr) # para el análisis exploratorio de datos.
library(brulee) # Para entrenar redes neuronales con `torch`.
library(knitr) # para el formateo de tablas.
```

:::{#exr-arboles-decision-cancer}
El conjunto de datos [cancer-mama.csv](datos/cancer-mama.csv) contiene información sobre las características de núcleos de células mamarias obtenidas de imágenes digitalizadas tanto de células cancerosas como no cancerosas obtenidas por biopsia. Las variables que contiene son:

- ID: Identificador único de la muestra.
- Diagnostico: Diagnóstico de la muestra (M: maligno, B: benigno).
- Radio: Media de la distancia desde el centro hasta los puntos de la superficie.
- Textura: Desviación estándar de la intensidad de gris de los puntos.
- Perímetro: Longitud del contorno.
- Área: Área de la imagen.
- Suavidad: Variación local en la longitud del radio.
- Compacidad: Perímetro^2 / Área - 1.0.
- Concavidad: Magnitud de las porciones cóncavas del contorno.
- Puntos_concavos: Número de puntos cóncavos del contorno.
- Simetría: Simetría de la imagen.
- Irregularidad: Medida de la irregularidad de la forma.

a.  Crear un dataframe con los datos del archivo [`cancer-mama.csv`](https://aprendeconalf.es/aprendizaje-automatico-practicas-r/datos/cancer-mama.csv).

    :::{.callout-tip collapse="true"}
    ## Solución 

    ```{r}
    library(tidyverse)
    df <- read.csv("https://aprendeconalf.es/aprendizaje-automatico-practicas-r/datos/cancer-mama.csv", stringsAsFactors = TRUE) |>
        # Convertimos la variable Diagnostico a un factor.
        mutate(Diagnostico = factor(Diagnostico, levels = c("B", "M"), labels = c("Benigno", "Maligno")))
    glimpse(df)
    ```
    :::

a.  Hacer un análisis exploratorio de los datos.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    library(skimr)
    skim(df)
    ```
    :::

a.  Dibujar un diagrama de relación entre todos los pares de variables del conjunto de datos diferenciando por el diagnóstico.

    :::{.callout-note collapse="true"}
    ## Ayuda
    Se puede utilizar la función `ggpairs` del paquete `GGally` para dibujar un diagrama de relación entre todos los pares de variables del conjunto de datos. Asociar el sexo a la dimensión del color.
    :::

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    library(GGally)
    ggpairs(df, aes(color = Diagnostico, alpha = 0.5))
    ```
    :::

a.  Dividir el conjunto de datos en un conjunto de entrenamiento y un conjunto de prueba, con una proporción del 80% para el entrenamiento y el 20% para la prueba, estratificando por el diagnóstico.

    ::: {.callout-note collapse="true"}
    ## Ayuda
    Utilizar la función [`initial_split`](https://rsample.tidymodels.org/reference/initial_split.html) del paquete [`rsample`](https://rsample.tidymodels.org/) para dividir el conjunto de datos en entrenamiento y test.

    Parámetros:
    - `data`: el data frame con los datos.
    - `prop`: la proporción del conjunto de datos que se utilizará para el conjunto de entrenamiento (en este caso, 0.8 para el 80%).
    - `strata`: la variable de estratificación (en este caso, `Diagnostico`) para asegurar que la distribución de clases se mantenga en ambos conjuntos.
    :::

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    library(tidymodels)
    # Establecemos la semilla para la reproducibilidad.
    set.seed(123)
    # Dividimos el conjunto de datos en un conjunto de entrenamiento y un conjunto de test.
    df_particion <- initial_split(df, prop = 0.8, strata = "Diagnostico")
    # Extraemos el conjunto de entrenamiento.
    df_entrenamiento <- training(df_particion)
    # Extraemos el conjunto de test.
    df_test <- testing(df_particion)
    ```
    :::

a.  Preprocesar el conjunto de entrenamiento para normalizar las variables numéricas.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    # Creamos una receta de preprocesamiento.
    receta <- recipe(Diagnostico ~ ., data = df_entrenamiento) |>
        # Normalizamos las variables numéricas.
        step_normalize(all_numeric_predictors())
    ```
    :::

a.  Construir una red neuronal con una capa oculta de 10 neuronas para predecir el diagnóstico. Realizar solo dos iteraciones (épocas) de entrenamiento.

    ::: {.callout-note collapse="true"}
    ## Ayuda
    Utilizar la función [`mlp`](https://parsnip.tidymodels.org/reference/mlp.html) del paquete [`parsnip`](https://parsnip.tidymodels.org/index.html) para crear un modelo de red neuronal.

    Parámetros:
    - `hidden_units`: el número de neuronas en la capa oculta (10 en este caso).
    - `activation`: la función de activación a utilizar (por defecto "relu").
    - `dropout`: la proporción de parámetros reseteados a 0 durante el entrenamiento (0.1 por defecto).
    - `epochs`: el número de épocas de entrenamiento (100 por defecto).

    Después, utilizar la función [`set_engine`](https://parsnip.tidymodels.org/reference/set_engine.html) para especificar el motor a utilizar (en este caso, `brulee`).

    Utilizar la función [`set_mode`](https://parsnip.tidymodels.org/reference/set_mode.html) para especificar que se trata de un modelo de clasificación.

    Finalmente, utilizar la función [`extract_fit_engine`](https://parsnip.tidymodels.org/reference/extract_fit_engine.html) para extraer el modelo entrenado del flujo de trabajo.
    :::

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    set.seed(123)
    library(brulee)
    library(knitr)
    # Creamos un modelo de red neuronal.
    modelo <- mlp(hidden_units = 10, epochs = 2) |>
        set_engine("brulee") |>
        set_mode("classification")

    modelo_entrenado <- workflow() |>
        # Añadimos la receta de preprocesamiento.
        add_recipe(receta) |>
        # Añadimos el modelo.
        add_model(modelo) |>
        # Entrenamos el modelo.
        fit(data = df_entrenamiento)

    modelo_entrenado |>
        # Mostramos un resumen del modelo.
        extract_fit_engine()
    ```
:::

a.  Evaluar el modelo con el conjunto de test y calcular la matriz de confusión, la exactitud, y el area bajo la curva ROC.

    :::{.callout-note collapse="true"}
    ## Ayuda
    Usar la función [`augment`](https://parsnip.tidymodels.org/reference/augment.html) del paquete [`parsnip`](https://parsnip.tidymodels.org/index.html) para añadir al conjunto de test las probabilidades cada especie de pingüino.

    Parámetros:
    - `new_data`: el conjunto de datos de test.

    Usar la función [`conf_mat`](https://yardstick.tidymodels.org/reference/conf_mat.html) del paquete [`yardstick`](https://yardstick.tidymodels.org/) para calcular la matriz de confusión.

    Parámetros:
    - `truth`: la variable respuesta (en este caso, `Especie`).
    - `estimate`: la variable con las clases predichas por el modelo (en este caso, `.pred_class`).

    Usar la función [`metrics`](https://yardstick.tidymodels.org/reference/metrics.html) del paquete [`yardstick`](https://yardstick.tidymodels.org/) para calcular las métricas de evaluación del modelo.

    Parámetros:
    - `truth`: la variable respuesta (en este caso, `Especie`).
    - `estimate`: la variable con las clases predichas por el modelo (en este case, `.pred_class`).

    Usar la función [`roc_auc`](https://yardstick.tidymodels.org/reference/roc_auc.html) del paquete [`yardstick`](https://yardstick.tidymodels.org/) para calcular el área bajo la curva ROC.

    Parámetros:
    - `truth`: la variable respuesta (en este caso, `Especie`).
    - `estimate`: la variable con las probabilidades de la clase positiva (en este caso, `.pred_Benigno`).
    :::

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    # Añadimos las predicciones al conjunto de test.
    df_test_2 <- modelo_entrenado |> augment(new_data = df_test)

    # Calculamos la matriz de confusión.
    matriz_confusion <- df_test_2 |> conf_mat(truth = Diagnostico, estimate = .pred_class) 
    matriz_confusion$table |> kable()

    # Calculamos la exactitud.
    df_test_2 |> metrics(truth = Diagnostico, estimate = .pred_class) |>
        # Mostramos las métricas de evaluación del modelo.
        kable()

    # Calculamos el área bajo la curva ROC.
    df_test_2 |> roc_auc(truth = Diagnostico, .pred_Benigno) |>
        # Mostramos el área bajo la curva ROC.
        kable()
    ```
    :::

a.  Volver a entrenar la red neuronal anterior con 10 iteraciones (épocas) y evaluar la exactitud del modelo con el conjunto de test.

    ::: {.callout-note collapse="true"}
    ## Ayuda
    Utilizar la función [`mlp`](https://parsnip.tidymodels.org/reference/mlp.html) del paquete [`parsnip`](https://parsnip.tidymodels.org/index.html) para crear un modelo de red neuronal.

    Parámetros:
    - `hidden_units`: el número de neuronas en la capa oculta (10 en este caso).
    - `activation`: la función de activación a utilizar (por defecto "relu").
    - `dropout`: la proporción de parámetros reseteados a 0 durante el entrenamiento (0.1 por defecto).
    - `epochs`: el número de épocas de entrenamiento (100 por defecto).

    Después, utilizar la función [`set_engine`](https://parsnip.tidymodels.org/reference/set_engine.html) para especificar el motor a utilizar (en este caso, `brulee`).

    Utilizar la función [`set_mode`](https://parsnip.tidymodels.org/reference/set_mode.html) para especificar que se trata de un modelo de clasificación.

    Finalmente, utilizar la función [`extract_fit_engine`](https://parsnip.tidymodels.org/reference/extract_fit_engine.html) para extraer el modelo entrenado del flujo de trabajo.
    :::

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    set.seed(123)
    library(brulee)
    library(knitr)
    # Creamos un modelo de red neuronal.
    modelo <- mlp(hidden_units = 10, epochs = 10) |>
        set_engine("brulee") |>
        set_mode("classification")

    modelo_entrenado <- workflow() |>
        # Añadimos la receta de preprocesamiento.
        add_recipe(receta) |>
        # Añadimos el modelo.
        add_model(modelo) |>
        # Entrenamos el modelo.
        fit(data = df_entrenamiento)

    # Añadimos las predicciones al conjunto de test.
    df_test_10 <- modelo_entrenado |> augment(new_data = df_test)

    # Calculamos la exactitud.
    df_test_10 |> metrics(truth = Diagnostico, estimate = .pred_class) |>
        # Mostramos las métricas de evaluación del modelo.
        kable()
    ```
    :::
:::

:::{#exr-redes-neuronales-vinos}
El fichero [`vinos.csv`](https://aprendeconalf.es/aprendizaje-automatico-practicas-r/datos/vinos.csv) contiene información sobre las características de vinos blancos y tintos portugueses de la denominación "Vinho Verde". Las variables que contiene son las siguientes:


| Variable             | Descripción                                                           | Tipo (unidades)        |
|----------------------------------------|-----------------------------------------------------------------------|------------------------|
| tipo                 | Tipo de vino                                                          | Factor (blanco, tinto) |
| meses.barrica        | Meses de envejecimiento en barrica                               | Numérica(meses)  |
| acided.fija          | Cantidad de ácidotartárico                                 | Numérica(g/dm3)  |
| acided.volatil       | Cantidad de ácido acético                                             | Numérica(g/dm3)  |
| acido.citrico        | Cantidad de ácidocítrico                                        | Numérica(g/dm3)  |
| azucar.residual      | Cantidad de azúcar remanente después de la fermentación          | Numérica(g/dm3)  |
| cloruro.sodico       | Cantidad de clorurosódico                                       | Numérica(g/dm3)  |
| dioxido.azufre.libre | Cantidad de dióxido de azufre en forma libre                | Numérica(mg/dm3) |
| dioxido.azufre.total | Cantidad de dióxido de azufre total en forma libre o ligada | Numérica(mg/dm3) |
| densidad             | Densidad                                                              | Numérica(g/cm3)  |
| ph                   | pH                                                                    | Numérica(0-14)   |
| sulfatos             | Cantidad de sulfato de potasio                                   | Numérica(g/dm3)  |
| alcohol              | Porcentaje de contenido de alcohol                          | Numérica(0-100)  |
| calidad              | Calificación otorgada por un panel de expertos                   | Numérica(0-10)   |
a.  Crear un data frame con los datos del archivo [`vinos.csv`](https://aprendeconalf.es/aprendizaje-automatico-practicas-r/datos/vinos.csv).

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    library(tidyverse)
    df <- read.csv("datos/vinos.csv", stringsAsFactors = TRUE)
    glimpse(df)
    ```
    :::

a.  Realizar un análisis exploratorio de los datos.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    library(skimr)
    skim(df)
    ```
    :::

a.  Recodificar la variable `calidad` en una variable categórica con las siguientes categorías:
  
    - Muy malo: 1-2
    - Malo: 3-4
    - Regular: 5
    - Bueno: 6
    - Muy bueno: 7-8
    - Excelente: 9-10

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df <- df |>
        # Convertimos la variable calidad a un factor.
        mutate(calidad = factor(case_when(
            calidad %in% c(1, 2) ~ "Muy malo",
            calidad %in% c(3, 4) ~ "Malo",
            calidad == 5 ~ "Regular",
            calidad == 6 ~ "Bueno",
            calidad %in% c(7, 8) ~ "Muy bueno",
            TRUE ~ "Excelente"
        ), levels = c("Muy malo", "Malo", "Regular", "Bueno", "Muy bueno", "Excelente")))
    ```
    :::

a.  Mostrar la tabla de frecuencias de la variable `calidad`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        # Mostramos la tabla de frecuencias de la variable calidad.
        count(calidad) |>
        # Mostramos la tabla de frecuencias.
        kable()
    ```
    :::

a.  Dividir el conjunto de datos en un conjunto de entrenamiento (80%) y un conjunto de prueba (20%) estratificando por la variable `calidad`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    library(tidymodels)
    set.seed(123) # Semilla aleatoria para la reproducibilidad.
    df_particion <- initial_split(df, prop = 0.8, strata = "calidad")  # Dividir el conjunto de datos en entrenamiento (80%) y test (20%).
    df_entrenamiento <- training(df_particion) # Extraemos el conjunto de entrenamiento.
    df_test <- testing(df_particion) # Extraemos el conjunto de test.
    ```
    :::

a.  Establecer la `calidad` como variable objetivo, normalizar las variables predictivas y convertir las variables categóricas en variables numéricas dummy.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    # Definimos la receta de preprocesamiento.
    receta <- recipe(calidad ~ ., data = df_entrenamiento) |> 
        # Normalizamos las variables numéricas.
        step_normalize(all_numeric_predictors()) |> 
        # Convertimos las variables categóricas en variables dummy.
        step_dummy(all_nominal_predictors()) 
    ```
    :::

a.  Construir una red neuronal para predecir la calidad del vino explorando distintos valores para el número de neuronas en la capa oculta (10, 15, 20, 25) mediante validación cruzada con 5 pliegues. Utilizar la precisión y el área bajo la curva ROC como métricas de evaluación.

    :::{.callout-note collapse="true"}
    ## Ayuda
    Utilizar la función [`tune()`](https://hardhat.tidymodels.org/reference/tune.html) del paquete [`hardhat`](https://hardhat.tidymodels.org/) para definir los parámetros a optimizar. En este caso, se pueden definir los siguientes parámetros:
    - `hidden_units`: el número de neuronas en la capa oculta.

    Después, utilizar la función [`tune_grid`](https://tune.tidymodels.org/reference/tune_grid.html) del paquete [`tune`](https://tune.tidymodels.org/) para optimizar los parámetros del modelo de la red neuronal.

    Parámetros:
    - `resamples`: el conjunto de datos de entrenamiento particionado en pliegues para validación cruzada (en este caso, `vfold_cv(df_entrenamiento, v = 5)`).
    - `grid`: un data frame con los valores de los parámetros a probar.

    Usar la función [`autoplot()`](https://tune.tidymodels.org/reference/autoplot.tune_results.html) del paquete [`tune`](https://tune.tidymodels.org/) para visualizar los resultados de la optimización.
    :::

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    set.seed(123) # Semilla aleatoria para la reproducibilidad.
    library(brulee)
    # Creamos un modelo de red neuronal con un número variable de neuronas en la capa oculta.
    modelo <- mlp(hidden_units = tune()) |>
        set_engine("brulee") |>
        set_mode("classification")

    flujo <- workflow() |>
        # Añadimos la receta de preprocesamiento.
        add_recipe(receta) |>
        # Añadimos el modelo.
        add_model(modelo)

    modelos_entrenados <- flujo |>
    # Entrenamos los modelos con diferentes valores de neuronas en la capa oculta.
        tune_grid(
            resamples = vfold_cv(df_entrenamiento, v = 5), # Validación cruzada con 5 pliegues.
            control = control_grid(save_pred = TRUE), # Guardamos las predicciones.
            grid = tibble(hidden_units = seq(10, 25, by = 5)), # Valores de neuronas a probar.
            metrics = metric_set(accuracy, roc_auc) # Métricas de evaluación.
        ) 

    # Visualizamos los resultados de la validación cruzada.
        autoplot(modelos_entrenados) 
    ``` 
    :::

a.  Seleccionar el mejor modelo según la exactitud y entrenarlo con el conjunto de entrenamiento.
    
    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    modelo_final <- flujo |>
        # Seleccionamos el mejor modelo según la exactitud.
        finalize_workflow(select_best(modelos_entrenados, metric = "accuracy")) |> 
        # Entrenamos el modelo con el conjunto de entrenamiento.
        last_fit(df_particion, metrics = metric_set(accuracy, roc_auc))
    # Mostramos un resumen del modelo.
    modelo_final |>
        extract_fit_engine() 
    ```
    :::

a.  Evaluar el modelo con el conjunto de test y la exactitud y el área bajo la curva ROC.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    # Extraemos las métricas de evaluación del modelo entrenado.
        collect_metrics(modelo_final) |> kable()
    ```
    :::
:::

## Ejercicios Propuestos

:::{#exr-redes-neuronales-infartos}
El fichero [`infartos.csv`](datos/infartos.csv) contiene información sobre distintas variables fisiológicas relacionadas con el riesgo de infarto de una muestra de personas. Las variables que contienen son:

- `Edad`: Edad del paciente (años)
- `Sexo`: Sexo del paciente (H: hombre, M: mujer)
- `DolorPecho`: Tipo de dolor torácico (TA: angina típica, ATA: angina atípica, NAP: dolor no anginoso, ASY: asintomático)
- `PresionArterial`: Presión arterial sistólica en reposo (mm Hg)
- `Colesterol`: Colesterol sérico (mm/dl)
-  `Glucemia`: Glucemia en ayunas (1: si glucemia en ayunas > 120 mg/dl, 0: de lo contrario)
- `Electro`: resultados del electrocardiograma en reposo (Normal: normal, ST: anomalía onda ST-T (inversiones de onda T y/o elevación o depresión de ST > 0,05 mV), LVH: hipertrofia ventricular izquierda probable o definitiva según criterios de Estes)
- `Pulsaciones`: Frecuencia cardíaca máxima alcanzada (valor numérico entre 60 y 202)
- `AnginaEjercicio`: Angina inducida por ejercicio (S: sí, N: no)
- `DepresionST`: Depresión del segmento ST inducida por el ejercicio (valor numérico de la depresión).
- `PendienteST`: Pendiente del segmento ST en el pico de ejercicio (Ascendente, Plano, Descencdente).
- `Infarto`: Riesgo de infarto (1: Sí, 0: No)

a.  Crear un dataframe con los datos del archivo [`infartos.csv`](https://aprendeconalf.es/aprendizaje-automatico-practicas-r/datos/vinos.csv).

a.  Realizar un análisis exploratorio de los datos.

a.  Dividir el conjunto de datos en dos subconjuntos, uno de entrenamiento y otro de test. Utilizar el 80% de los datos para entrenamiento y el 20% restante para test.

a.  Construir una red neuronal para predecir el riesgo de infarto explorando distinto número de neuronas en la capa oculta y validando los modelos mediante validación cruzada de 5 pliegues. ¿Qué número de neuronas tiene el mejor modelo según la exactitud?

a.  Entrenar el mejor modelo del apartado anterior con el conjunto de entrenamiento y evaluarlo con el conjunto de test. Calcular la matriz de confusión y también la precisión, sensibilidad y la especificidad.

:::